/**
 * Generate typescript interface from table schema
 * Created by xiamx on 2016-08-10.
 */

import { sortBy } from 'lodash'

import { TableDefinition, EnumDefinition, SchemaDefinition, CustomDefinition } from './schemaInterfaces'
import { Options } from './options'

const pkgVersion = require('../package.json').version

function getTime () {
    let padTime = (value: number) => `0${value}`.slice(-2)
    let time = new Date()
    const yyyy = time.getFullYear()
    const MM = padTime(time.getMonth() + 1)
    const dd = padTime(time.getDate())
    const hh = padTime(time.getHours())
    const mm = padTime(time.getMinutes())
    const ss = padTime(time.getSeconds())
    return `${yyyy}-${MM}-${dd} ${hh}:${mm}:${ss}`
}

function nameIsReservedKeyword (name: string): boolean {
    const reservedKeywords = [
        'string',
        'number',
        'package'
    ]
    return reservedKeywords.indexOf(name) !== -1
}

function normalizeName (name: string, options: Options): string {
    if (nameIsReservedKeyword(name)) {
        return name + '_'
    } else {
        return name
    }
}

const HEADER_LINE = '/* tslint:disable */\n'

function buildHeader (options: Options): string {
    if (options.noHeader) {
        return HEADER_LINE
    }

    let commands = process.argv.slice(1).join(' ').replace(/:\/\/.*@/,'://username:password@')

    return `
        ${HEADER_LINE}

        /**
         * AUTO-GENERATED FILE @ ${getTime()} - DO NOT EDIT!
         *
         * This file was automatically generated by schemats v.${pkgVersion}
         * $ ${commands}
         *
         */

    `
}

export function generateInterface (table: TableDefinition | CustomDefinition, options: Options) {
    const tableName = options.transformTypeName(table.name)
    const members = Object.keys(table.columns).map((key) => {
        const column = table.columns[key]
        const allowUndefined = column.hasDefault || column.nullable
        return `${options.transformColumnName(key)}${allowUndefined ? '?' : ''}: ${column.tsType}${column.nullable ? ' | null' : ''};`
    })

    return `
        export interface ${normalizeName(tableName, options)} {
        ${members.join('\n')}
        }
    `
}

export function generate (defs: SchemaDefinition[], options: Options) {
    const enumNamespace = options.getTypes<EnumDefinition>(defs, 'enum').map(({ name, values }) =>
        `export type ${options.transformTypeName(name)} = '${sortBy(values).join(`' | '`)}';`
    )

    const customInterfaces = options.getTypes<CustomDefinition>(defs, 'custom').map((table) =>
        generateInterface(table, options)
    )

    const tableInterfaces = options.getTypes<TableDefinition>(defs, 'table').map((table) =>
        generateInterface(table, options)
    )

    return `
        ${buildHeader(options)}

        export namespace customTypes {
        ${enumNamespace.join('\n')}

        ${customInterfaces.join('\n')}
        }

        ${tableInterfaces.join('\n')}
    `
}
